<?php

namespace spec\App\Entity;

use App\Entity\Parameter;
use App\Entity\ParameterValue;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class ParameterValueSpec extends ObjectBehavior
{
    function let(Parameter $parameter)
    {
        $this->beConstructedWith($parameter);
    }

    function it_is_initializable_with_at_least_one_parameter(Parameter $parameter)
    {
        $this->beConstructedWith($parameter);
        $this->shouldHaveType(ParameterValue::class);
    }

    function it_is_initializable_with_all_parameters(Parameter $parameter)
    {
        $this->beConstructedWith($parameter, "FAKE-UUID", "some value");
        $this->shouldHaveType(ParameterValue::class);
    }

    function its_id_is_autogenerated_uuid_by_default(Parameter $parameter)
    {
        $this->beConstructedWith($parameter);
        $this->getId()->shouldMatch('/^[A-Fa-f0-9]{8}(-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}$/');
    }

    function its_id_can_be_set_via_constructor(Parameter $parameter)
    {
        $this->beConstructedWith($parameter, "FAKE-UUID");
        $this->getId()->shouldReturn("FAKE-UUID");
    }

    function it_cannot_be_constructed_without_the_parameter()
    {
        $this->beConstructedWith();
        $this->shouldThrow()->duringInstantiation();
    }

    function its_parameter_is_always_set_via_constructor(Parameter $parameter)
    {
        $this->beConstructedWith($parameter);
        $this->getParameter()->shouldReturn($parameter);
    }

    function its_value_is_null_by_default(Parameter $parameter)
    {
        $this->beConstructedWith($parameter);
        $this->getValue()->shouldBeNull();
    }

    function its_value_can_be_set_via_constructor(Parameter $parameter)
    {
        $this->beConstructedWith($parameter, null, "some value");
        $this->getValue()->shouldReturn("some value");
    }

    function its_prohibited_values_is_empty_by_default()
    {
        $this->getProhibitedValues()->shouldBeEmpty();
    }

    function it_adds_new_value_to_prohibit(ParameterValue $value)
    {
        $this->addProhibitedValue($value);
        $this->getProhibitedValues()->shouldContain($value);
    }

    function it_adds_prohibited_value_only_once(ParameterValue $value)
    {
        $this->addProhibitedValue($value);
        $this->addProhibitedValue($value);
        $this->getProhibitedValues()->shouldHaveCount(1);
    }

    function it_makes_the_inverse_prohibition_automatically(ParameterValue $value)
    {
        $this->addProhibitedValue($value);

        $value->addProhibitedValue($this)->shouldHaveBeenCalled();
    }
}
